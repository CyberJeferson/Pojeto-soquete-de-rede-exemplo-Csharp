<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>